// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    userId            String
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id                String             @id @default(cuid())
    name              String?
    email             String?            @unique
    emailVerified     DateTime?
    image             String?
    username          String?            @unique
    tag               String?
    publicMessage     String?
    accounts          Account[]
    sessions          Session[]
    serverConnections ServerConnection[]
}

// Server
model Server {
    id          String  @id @default(cuid())
    name        String
    description String  @default("")
    image       String?

    connections   ServerConnection[]
    channels      ServerChannel[]
    channelGroups ServerChannelGroup[]
    roles         ServerRole[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ServerConnection {
    id String @id @default(cuid())

    lastVisitedChannel   ServerChannel? @relation(fields: [lastVisitedChannelId], references: [id], onDelete: Cascade)
    lastVisitedChannelId String?

    role   ServerRole @relation(fields: [roleId], references: [id], onDelete: Cascade)
    roleId String

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
    serverId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ServerChannel {
    id   String @id @default(cuid())
    name String

    server   Server              @relation(fields: [serverId], references: [id], onDelete: Cascade)
    serverId String
    parent   ServerChannelGroup? @relation(fields: [parentId], references: [id], onDelete: Cascade)
    parentId String?

    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    ServerConnection ServerConnection[]
}

model ServerChannelGroup {
    id   String @id @default(cuid())
    name String

    channels ServerChannel[]
    server   Server          @relation(fields: [serverId], references: [id], onDelete: Cascade)
    serverId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ServerRole {
    id   String @id @default(cuid())
    key  String
    name String

    isPublic  Boolean @default(false)
    isInitial Boolean @default(false)

    connections ServerConnection[]

    server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
    serverId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
